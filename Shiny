library(dplyr)
library(shiny)
library(ggplot2)
library(DT)
library(RODBCext)
library(RODBC)
library(shinyURL)
library(shinythemes)
library(EBImage)
# 
# define a dataset to be used
ch <- odbcDriverConnect('driver={SQL Server};server=;database=;uid=;pwd=;trusted_connection=true')
res <- sqlExecute(ch, "",
                  fetch = TRUE,
                  stringsAsFactors = FALSE)

shinyApp(
  ui <- fluidPage(
    titlePanel(""),
    theme = shinytheme("flatly"),
    fluidRow(
      column(12,
             
             sidebarLayout(
               sidebarPanel(
                 
##These are all filters that will filter the data that is displayed##
                 
                 
                                  selectizeInput("player_b", "Batter (select up to 2)",
                                                 choices = c("All", sort(as.character(unique(res$Name)))),
                                                 selected = "Aaron Judge", 
                                                 multiple = TRUE),
                 
                                  selectizeInput("pitcher_b", "Pitcher",
                                                 choices = c("All", sort(as.character(unique(res$`Pitcher Name`)))),
                                                 selected = "All"),
                 
                 
                                  dateRangeInput("dates", "Date Range", 
                                                 start = min(as.Date(res$game_date, "%Y-%m-%d")), 
                                                 end = max(as.Date(res$game_date, "%Y-%m-%d")),
                                                 min = min(as.Date(res$game_date, "%Y-%m-%d")),
                                                 max = max(as.Date(res$game_date, "%Y-%m-%d")),
                                                 language = "en", separator = " to ", width = NULL)
                #This doesn't change any data, just the picture of the venue
                            ,selectInput("Venue", "Venue", 
                             choices = sort(unique(res$VenueLong)),
                             selected = 'Yankee Stadium',
                             multiple = FALSE),
                 selectInput("Count", "Count", 
                              choices = sort(unique(res$Count), decreasing = FALSE),
                              selected = sort(unique(res$Count), decreasing = FALSE),
                              multiple = TRUE) ,
                 selectInput("Chopper", "Chopper", 
                             choices = c("Yes", "No"),
                             selected = c("Yes", "No"),
                             multiple = TRUE) ,
                 selectInput("stand_b", "Batter Stands", 
                             choices = c("R", "L"),
                             selected = c("R", "L"),
                             multiple = TRUE),
                 selectInput("p_throws", "Pitcher Throws", 
                             choices = c("R", "L"),
                             selected = c("R", "L"),
                             multiple = TRUE),
                 selectInput("pitchType", "Pitch Type", 
                             choices = c("FF", "FT", "FT", "SI", "FA", "FO", "FS", "CU", "CH", "SL", "KC", "EP", "SC"),
                             selected = c("FF", "FT", "FT", "SI", "FA", "FO", "FS", "CU", "CH", "SL", "KC", "EP", "SC"),
                             multiple = TRUE),
                 selectInput("outcome", "Outcome Type", 
                             choices = c("1B", "2B", "3B", "HR", "Out"),
                             selected = c("1B", "2B", "3B", "HR", "Out"),
                             multiple = TRUE),
                 selectInput("hitType", "Hit Type", 
                             choices = c("ground_ball", "line_drive", "fly_ball", "popup", "Unknown"),
                             selected = c("ground_ball", "line_drive", "fly_ball", "popup", "Unknown"),
                             multiple = TRUE),

                 shinyURL.ui(label = "Save Selections & Share URL")
                 ,width = 3
               ), 
               
               mainPanel(
                 tags$style(type="text/css",
                            ".shiny-output-error { visibility: hidden; }",
                            ".shiny-output-error:before { visibility: hidden; }"
                 ),
                 #this is actually calling the plotoutputs by name, it references it usin outputId
                                  tabsetPanel(tabPanel("Batter Comparison", 
                                                       div(style = "position:relative", plotOutput(outputId = "coolplot_hitters"
                                                      ,click = "coolplot_hittersdblclick" ,hover = hoverOpts("plot_hover_batters"
                                                      , delay = 100, delayType = "debounce")), uiOutput("hover_info_batters")),
                                                       br(), br(), br(), br(), br(), br(), DT::dataTableOutput(outputId = 'b_results'))
                                              
                                  )

                 , width = 9)
             )))),
  
  server <- function(input, output, session) {
    
    shinyURL.server(session)

    filtered <- reactive({
      #Based on the input, the filtered dataset will be different, so we need to define both.
      
      if( input$pitcher_b == "All"  )
        
        filtered <- res %>%
          filter(Name %in% input$player_b, 
                 stand %in% input$stand_b,
                 p_throws %in% input$p_throws,
                 pitch_type %in% input$pitchType,
                 Outcome_Type %in% input$outcome,
                 hit_type %in% input$hitType,
                 Count %in% input$Count,
                 Chopper %in% input$Chopper,
                 as.Date(res$game_date, "%Y-%m-%d") >= input$dates[1] & 
                   as.Date(res$game_date, "%Y-%m-%d") <= input$dates[2])
      
      if(input$pitcher_b != "All" )
        
        filtered <- res %>%
          filter(Name %in% input$player_b, 
                 `Pitcher Name` %in% input$pitcher_b,
                 stand %in% input$stand_b,
                 p_throws %in% input$p_throws,
                 pitch_type %in% input$pitchType,
                 Outcome_Type %in% input$outcome,
                 hit_type %in% input$hitType,
                 Count %in% input$Count,
                 Chopper %in% input$Chopper,
                 as.Date(res$game_date, "%Y-%m-%d") >= input$dates[1] & 
                   as.Date(res$game_date, "%Y-%m-%d") <= input$dates[2])
      
      

      
      
      filtered
      
    })
    
    #define the plot to display
    output$coolplot_hitters <- renderPlot({
      diamond <- readImage(sprintf("",input$Venue))
        g <- ggplot(filtered() ,aes(X, Y))+ annotation_custom(grid::rasterGrob(diamond)) + 
          geom_point(aes(alpha = .03)) +scale_x_continuous() +scale_y_continuous() +
          stat_density2d(aes(x = X, y = Y,fill = ..level..,alpha=..level..) , geom = 'polygon', contour = TRUE, na.rm = TRUE )+
          scale_alpha_continuous(guide="none",range=c(.1,1))+
          scale_fill_gradient2(high = 'red', low = 'green', mid = 'yellow')+
          coord_equal() +
          theme_void() 
      if (length(input$player_b != 1))
        return(g + facet_wrap(~Name, ncol = 2, nrow = 1))
        
      return(g)
    }, height = 525, width = 1200)
    
    output$b_results <- DT::renderDataTable({
      
      table <- filtered() %>%
        group_by(Name) %>%
        summarise(`Batted Balls` = n(), 
                  `Average Launch Angle (degrees)` = round(mean(launch_angle, na.rm = FALSE), 1), 
                  `Average Launch Speed (mph)` = round(mean(launch_speed, na.rm = FALSE), 1),
                  `SLG on Contact` = round((sum(Bases)/n()), 3)
        )
    }, options = list(dom = 't',
                      rownames = FALSE, 
                      autoWidth = FALSE
    )
    )#define the hover options
    output$hover_info_batters <- renderUI({
      hover <- input$plot_hover_batters
      point <- nearPoints(filtered(), hover, threshold = 5, maxpoints = 1, addDist = TRUE)
      if (nrow(point) == 0) return(NULL)
      
      left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
      top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
      
      left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
      top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
      
      style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
                      "left:", left_px + 2, "px; top:", top_px + 2, "px;")
      wellPanel(
        style = style,
        p(HTML(paste0("<b> Date: </b>", point$game_date, "<br/>",
                      "<b> Batter: </b>", point$Name, "<br/>",
                      "<b> Pitcher: </b>", point$`Pitcher Name`, "<br/>",
                      "<b> Outcome: </b>", point$Outcome_Type, "<br/>",
                      "<b> Distance (ft.): </b>", point$LandingDistance, "<br/>",
                      "<b> Launch Angle (degrees): </b>", point$launch_angle, "<br/>", 
                      "<b> Launch Speed (mph): </b>", point$launch_speed, "<br/>", 
                      "<b> Venue (mph): </b>", point$Venue, "<br/>",
                      "<b> Hit Probability: </b>", point$HitProbability, "<br/>",
                      "<b> XLocation (ft.): </b>", point$X, "<br/>",
                      "<b> YLocation (ft.): </b>", point$Y, "<br/>"
        ))))
    })

    
  }
)
